//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.10.0 (NJsonSchema v9.10.49.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Pakkie.Services.PostNL.Pickup
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.10.0 (NJsonSchema v9.10.49.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PickupClient
    {
        private string _baseUrl = "https://api.postnl.nl/shipment";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PickupClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Returns locations nearest to the supplied location.</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="countryCode">The ISO2 country codes</param>
        /// <param name="postalCode">Zipcode of the address. Mandatory when no coordinates are entered</param>
        /// <param name="city">City of the address</param>
        /// <param name="street">The street name of the delivery address</param>
        /// <param name="houseNumber">The house number of the delivery address</param>
        /// <param name="deliveryDate">The date of the earliest delivery date. Format: dd-mm-yyyy Note: this date cannot be in the past, otherwise an error is returned.</param>
        /// <param name="openingTime">Time of opening. Format: hh:mm:ss. This field will be used to filter the locations on opening hours.</param>
        /// <param name="deliveryOptions">One or more delivery options (related to the product). See Guidelines on this page for possible values.</param>
        /// <returns>Nearest locations</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Location>> NearestAsync(string apikey, CountryCode countryCode, string postalCode, string city, string street, int? houseNumber, string deliveryDate, string openingTime, System.Collections.Generic.IEnumerable<Anonymous> deliveryOptions)
        {
            return NearestAsync(apikey, countryCode, postalCode, city, street, houseNumber, deliveryDate, openingTime, deliveryOptions, System.Threading.CancellationToken.None);
        }

        /// <summary>Returns locations nearest to the supplied location.</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="countryCode">The ISO2 country codes</param>
        /// <param name="postalCode">Zipcode of the address. Mandatory when no coordinates are entered</param>
        /// <param name="city">City of the address</param>
        /// <param name="street">The street name of the delivery address</param>
        /// <param name="houseNumber">The house number of the delivery address</param>
        /// <param name="deliveryDate">The date of the earliest delivery date. Format: dd-mm-yyyy Note: this date cannot be in the past, otherwise an error is returned.</param>
        /// <param name="openingTime">Time of opening. Format: hh:mm:ss. This field will be used to filter the locations on opening hours.</param>
        /// <param name="deliveryOptions">One or more delivery options (related to the product). See Guidelines on this page for possible values.</param>
        /// <returns>Nearest locations</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Location>> NearestAsync(string apikey, CountryCode countryCode, string postalCode, string city, string street, int? houseNumber, string deliveryDate, string openingTime, System.Collections.Generic.IEnumerable<Anonymous> deliveryOptions, System.Threading.CancellationToken cancellationToken)
        {
            if (countryCode == null)
                throw new System.ArgumentNullException("countryCode");

            if (postalCode == null)
                throw new System.ArgumentNullException("postalCode");

            if (deliveryOptions == null)
                throw new System.ArgumentNullException("deliveryOptions");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2_1/locations/nearest?");
            urlBuilder_.Append("CountryCode=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("PostalCode=").Append(System.Uri.EscapeDataString(ConvertToString(postalCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (city != null) urlBuilder_.Append("City=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (street != null) urlBuilder_.Append("Street=").Append(System.Uri.EscapeDataString(ConvertToString(street, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (houseNumber != null) urlBuilder_.Append("HouseNumber=").Append(System.Uri.EscapeDataString(ConvertToString(houseNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (deliveryDate != null) urlBuilder_.Append("DeliveryDate=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (openingTime != null) urlBuilder_.Append("OpeningTime=").Append(System.Uri.EscapeDataString(ConvertToString(openingTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            foreach (var item_ in deliveryOptions) { urlBuilder_.Append("DeliveryOptions=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apikey == null)
                        throw new System.ArgumentNullException("apikey");
                    request_.Headers.TryAddWithoutValidation("apikey", ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Location>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Location>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Error>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Error>>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("Invalid request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Location>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Returns the nearest location from a given geolocation.</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="countryCode">The ISO2 country codes</param>
        /// <param name="deliveryDate">The date of the earliest delivery date. Format: dd-mm-yyyy Note: this date cannot be in the past, otherwise an error is returned.</param>
        /// <param name="openingTime">Time of opening. Format: hh:mm:ss. This field will be used to filter the locations on opening hours.</param>
        /// <param name="deliveryOptions">One or more delivery options (related to the product). See Guidelines on this page for possible values.</param>
        /// <returns>Nearest locations</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Location>> GeocodeAsync(string apikey, double latitude, double longitude, CountryCode2 countryCode, string deliveryDate, string openingTime, System.Collections.Generic.IEnumerable<Anonymous2> deliveryOptions)
        {
            return GeocodeAsync(apikey, latitude, longitude, countryCode, deliveryDate, openingTime, deliveryOptions, System.Threading.CancellationToken.None);
        }

        /// <summary>Returns the nearest location from a given geolocation.</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="latitude">The latitude of the location</param>
        /// <param name="longitude">The longitude of the location</param>
        /// <param name="countryCode">The ISO2 country codes</param>
        /// <param name="deliveryDate">The date of the earliest delivery date. Format: dd-mm-yyyy Note: this date cannot be in the past, otherwise an error is returned.</param>
        /// <param name="openingTime">Time of opening. Format: hh:mm:ss. This field will be used to filter the locations on opening hours.</param>
        /// <param name="deliveryOptions">One or more delivery options (related to the product). See Guidelines on this page for possible values.</param>
        /// <returns>Nearest locations</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Location>> GeocodeAsync(string apikey, double latitude, double longitude, CountryCode2 countryCode, string deliveryDate, string openingTime, System.Collections.Generic.IEnumerable<Anonymous2> deliveryOptions, System.Threading.CancellationToken cancellationToken)
        {
            if (latitude == null)
                throw new System.ArgumentNullException("latitude");

            if (longitude == null)
                throw new System.ArgumentNullException("longitude");

            if (countryCode == null)
                throw new System.ArgumentNullException("countryCode");

            if (deliveryOptions == null)
                throw new System.ArgumentNullException("deliveryOptions");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2_1/locations/nearest/geocode?");
            urlBuilder_.Append("Latitude=").Append(System.Uri.EscapeDataString(ConvertToString(latitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("Longitude=").Append(System.Uri.EscapeDataString(ConvertToString(longitude, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("CountryCode=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (deliveryDate != null) urlBuilder_.Append("DeliveryDate=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (openingTime != null) urlBuilder_.Append("OpeningTime=").Append(System.Uri.EscapeDataString(ConvertToString(openingTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            foreach (var item_ in deliveryOptions) { urlBuilder_.Append("DeliveryOptions=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apikey == null)
                        throw new System.ArgumentNullException("apikey");
                    request_.Headers.TryAddWithoutValidation("apikey", ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Location>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Location>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Error>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Error>>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("Invalid request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Location>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Find locations in an area specified by geolocations</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="latitudeNorth">The coordinates of the north point of the area.</param>
        /// <param name="longitudeWest">The coordinates of the west point of the area.</param>
        /// <param name="latitudeSouth">The coordinates of the south point of the area.</param>
        /// <param name="longitudeEast">The coordinates of the east point of the area.</param>
        /// <param name="deliveryDate">The date of the earliest delivery date. Format: dd-mm-yyyy Note: this date cannot be in the past, otherwise an error is returned.</param>
        /// <param name="openingTime">Time of opening. Format: hh:mm:ss. This field will be used to filter the locations on opening hours.</param>
        /// <param name="deliveryOptions">The delivery options (timeframes) for which locations should be returned. See Guidelines</param>
        /// <returns>Locations in area</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Location>> AreaAsync(string apikey, double latitudeNorth, double longitudeWest, double latitudeSouth, double longitudeEast, CountryCode3 countryCode, string deliveryDate, string openingTime, System.Collections.Generic.IEnumerable<Anonymous3> deliveryOptions)
        {
            return AreaAsync(apikey, latitudeNorth, longitudeWest, latitudeSouth, longitudeEast, countryCode, deliveryDate, openingTime, deliveryOptions, System.Threading.CancellationToken.None);
        }

        /// <summary>Find locations in an area specified by geolocations</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="latitudeNorth">The coordinates of the north point of the area.</param>
        /// <param name="longitudeWest">The coordinates of the west point of the area.</param>
        /// <param name="latitudeSouth">The coordinates of the south point of the area.</param>
        /// <param name="longitudeEast">The coordinates of the east point of the area.</param>
        /// <param name="deliveryDate">The date of the earliest delivery date. Format: dd-mm-yyyy Note: this date cannot be in the past, otherwise an error is returned.</param>
        /// <param name="openingTime">Time of opening. Format: hh:mm:ss. This field will be used to filter the locations on opening hours.</param>
        /// <param name="deliveryOptions">The delivery options (timeframes) for which locations should be returned. See Guidelines</param>
        /// <returns>Locations in area</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Location>> AreaAsync(string apikey, double latitudeNorth, double longitudeWest, double latitudeSouth, double longitudeEast, CountryCode3 countryCode, string deliveryDate, string openingTime, System.Collections.Generic.IEnumerable<Anonymous3> deliveryOptions, System.Threading.CancellationToken cancellationToken)
        {
            if (latitudeNorth == null)
                throw new System.ArgumentNullException("latitudeNorth");

            if (longitudeWest == null)
                throw new System.ArgumentNullException("longitudeWest");

            if (latitudeSouth == null)
                throw new System.ArgumentNullException("latitudeSouth");

            if (longitudeEast == null)
                throw new System.ArgumentNullException("longitudeEast");

            if (countryCode == null)
                throw new System.ArgumentNullException("countryCode");

            if (deliveryOptions == null)
                throw new System.ArgumentNullException("deliveryOptions");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2_1/locations/area?");
            urlBuilder_.Append("LatitudeNorth=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeNorth, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("LongitudeWest=").Append(System.Uri.EscapeDataString(ConvertToString(longitudeWest, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("LatitudeSouth=").Append(System.Uri.EscapeDataString(ConvertToString(latitudeSouth, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("LongitudeEast=").Append(System.Uri.EscapeDataString(ConvertToString(longitudeEast, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("CountryCode=").Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (deliveryDate != null) urlBuilder_.Append("DeliveryDate=").Append(System.Uri.EscapeDataString(ConvertToString(deliveryDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (openingTime != null) urlBuilder_.Append("OpeningTime=").Append(System.Uri.EscapeDataString(ConvertToString(openingTime, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            foreach (var item_ in deliveryOptions) { urlBuilder_.Append("DeliveryOptions=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apikey == null)
                        throw new System.ArgumentNullException("apikey");
                    request_.Headers.TryAddWithoutValidation("apikey", ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Location>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Location>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Error>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Error>>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("Invalid request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Location>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Returns location information of the supplied location code.</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="locationCode">LocationCode information</param>
        /// <param name="retailNetworkID">RetailNetworkID information. Always PNPNL-01 for Dutch locations. For Belgium locations use LD-01.</param>
        /// <returns>Location information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Location> LookupAsync(string apikey, string locationCode, string retailNetworkID)
        {
            return LookupAsync(apikey, locationCode, retailNetworkID, System.Threading.CancellationToken.None);
        }

        /// <summary>Returns location information of the supplied location code.</summary>
        /// <param name="apikey">Authenticate using your API key</param>
        /// <param name="locationCode">LocationCode information</param>
        /// <param name="retailNetworkID">RetailNetworkID information. Always PNPNL-01 for Dutch locations. For Belgium locations use LD-01.</param>
        /// <returns>Location information</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Location> LookupAsync(string apikey, string locationCode, string retailNetworkID, System.Threading.CancellationToken cancellationToken)
        {
            if (locationCode == null)
                throw new System.ArgumentNullException("locationCode");

            if (retailNetworkID == null)
                throw new System.ArgumentNullException("retailNetworkID");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2_1/locations/lookup?");
            urlBuilder_.Append("LocationCode=").Append(System.Uri.EscapeDataString(ConvertToString(locationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("RetailNetworkID=").Append(System.Uri.EscapeDataString(ConvertToString(retailNetworkID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (apikey == null)
                        throw new System.ArgumentNullException("apikey");
                    request_.Headers.TryAddWithoutValidation("apikey", ConvertToString(apikey, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Location);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Location>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Error>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Error>>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Error>>("Invalid request", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Location);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error : System.ComponentModel.INotifyPropertyChanged
    {
        private string _errorMsg;
        private int? _errorNumber;

        [Newtonsoft.Json.JsonProperty("ErrorMsg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMsg
        {
            get { return _errorMsg; }
            set
            {
                if (_errorMsg != value)
                {
                    _errorMsg = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("ErrorNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorNumber
        {
            get { return _errorNumber; }
            set
            {
                if (_errorNumber != value)
                {
                    _errorNumber = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Location : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _locationCode;
        private string _name;
        private int? _distance;
        private double? _latitude;
        private double? _longitude;
        private Address _address;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous4> _deliveryOptions;
        private OpeningHours _openingHours;
        private string _partnerName;
        private string _phoneNumber;
        private string _retailNetworkID;
        private string _saleschannel;
        private string _terminalType;

        [Newtonsoft.Json.JsonProperty("LocationCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LocationCode
        {
            get { return _locationCode; }
            set
            {
                if (_locationCode != value)
                {
                    _locationCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Distance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Distance
        {
            get { return _distance; }
            set
            {
                if (_distance != value)
                {
                    _distance = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Latitude
        {
            get { return _latitude; }
            set
            {
                if (_latitude != value)
                {
                    _latitude = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Longitude
        {
            get { return _longitude; }
            set
            {
                if (_longitude != value)
                {
                    _longitude = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("DeliveryOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous4> DeliveryOptions
        {
            get { return _deliveryOptions; }
            set
            {
                if (_deliveryOptions != value)
                {
                    _deliveryOptions = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("OpeningHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OpeningHours OpeningHours
        {
            get { return _openingHours; }
            set
            {
                if (_openingHours != value)
                {
                    _openingHours = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("PartnerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartnerName
        {
            get { return _partnerName; }
            set
            {
                if (_partnerName != value)
                {
                    _partnerName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("PhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set
            {
                if (_phoneNumber != value)
                {
                    _phoneNumber = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("RetailNetworkID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RetailNetworkID
        {
            get { return _retailNetworkID; }
            set
            {
                if (_retailNetworkID != value)
                {
                    _retailNetworkID = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Saleschannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Saleschannel
        {
            get { return _saleschannel; }
            set
            {
                if (_saleschannel != value)
                {
                    _saleschannel = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("TerminalType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminalType
        {
            get { return _terminalType; }
            set
            {
                if (_terminalType != value)
                {
                    _terminalType = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Location FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Location>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>The ISO2 country codes</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CountryCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "NL")]
        NL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "BE")]
        BE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = "PG")]
        PG = 0,

        [System.Runtime.Serialization.EnumMember(Value = "PGE")]
        PGE = 1,

    }

    /// <summary>The ISO2 country codes</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CountryCode2
    {
        [System.Runtime.Serialization.EnumMember(Value = "NL")]
        NL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "BE")]
        BE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous2
    {
        [System.Runtime.Serialization.EnumMember(Value = "PG")]
        PG = 0,

        [System.Runtime.Serialization.EnumMember(Value = "PGE")]
        PGE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CountryCode3
    {
        [System.Runtime.Serialization.EnumMember(Value = "NL")]
        NL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "BE")]
        BE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous3
    {
        [System.Runtime.Serialization.EnumMember(Value = "PG")]
        PG = 0,

        [System.Runtime.Serialization.EnumMember(Value = "PGE")]
        PGE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Address : System.ComponentModel.INotifyPropertyChanged
    {
        private AddressCountrycode? _countrycode;
        private string _zipcode;
        private int? _houseNr;
        private string _street;
        private string _city;
        private string _remark;

        [Newtonsoft.Json.JsonProperty("Countrycode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressCountrycode? Countrycode
        {
            get { return _countrycode; }
            set
            {
                if (_countrycode != value)
                {
                    _countrycode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Zipcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zipcode
        {
            get { return _zipcode; }
            set
            {
                if (_zipcode != value)
                {
                    _zipcode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("HouseNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HouseNr
        {
            get { return _houseNr; }
            set
            {
                if (_houseNr != value)
                {
                    _houseNr = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street
        {
            get { return _street; }
            set
            {
                if (_street != value)
                {
                    _street = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    _city = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Remark", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Address FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Address>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous4
    {
        [System.Runtime.Serialization.EnumMember(Value = "UL")]
        UL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "PU")]
        PU = 1,

        [System.Runtime.Serialization.EnumMember(Value = "DO")]
        DO = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OpeningHours : System.ComponentModel.INotifyPropertyChanged
    {
        private string _monday;
        private string _tuesday;
        private string _wednesday;
        private string _thursday;
        private string _friday;
        private string _saturday;
        private string _sunday;

        [Newtonsoft.Json.JsonProperty("Monday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Monday
        {
            get { return _monday; }
            set
            {
                if (_monday != value)
                {
                    _monday = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Tuesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tuesday
        {
            get { return _tuesday; }
            set
            {
                if (_tuesday != value)
                {
                    _tuesday = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Wednesday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wednesday
        {
            get { return _wednesday; }
            set
            {
                if (_wednesday != value)
                {
                    _wednesday = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Thursday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thursday
        {
            get { return _thursday; }
            set
            {
                if (_thursday != value)
                {
                    _thursday = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Friday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Friday
        {
            get { return _friday; }
            set
            {
                if (_friday != value)
                {
                    _friday = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Saturday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Saturday
        {
            get { return _saturday; }
            set
            {
                if (_saturday != value)
                {
                    _saturday = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("Sunday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sunday
        {
            get { return _sunday; }
            set
            {
                if (_sunday != value)
                {
                    _sunday = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OpeningHours FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OpeningHours>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AddressCountrycode
    {
        [System.Runtime.Serialization.EnumMember(Value = "NL")]
        NL = 0,

        [System.Runtime.Serialization.EnumMember(Value = "BE")]
        BE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.10.0 (NJsonSchema v9.10.49.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.10.0 (NJsonSchema v9.10.49.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}